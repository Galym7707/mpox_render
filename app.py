# C:\Users\galym\Desktop\monkeypox_final\app.py
import os
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, –î–û –∏–º–ø–æ—Ä—Ç–∞ tensorflow
os.environ["TF_ENABLE_ONEDNN_OPTS"] = "0"

from flask import Flask, request, jsonify, render_template, g, url_for, session, redirect, make_response
from flask_babel import Babel, _
from PIL import Image
import numpy as np
from tensorflow.keras.models import load_model # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å
import logging
import requests
from werkzeug.utils import secure_filename
from translations.disease_data import disease_info
import datetime # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è –≥–æ–¥–∞ –≤ —Ñ—É—Ç–µ—Ä–µ

# –û—Ç–∫–ª—é—á–∞–µ–º oneDNN (—É–∂–µ –±—ã–ª–æ –≤—ã—à–µ, –ø–æ–≤—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏)
# os.environ["TF_ENABLE_ONEDNN_OPTS"] = "0"

app = Flask(__name__, static_folder='static', template_folder='templates')
app.secret_key = "mysecretkey" # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á
app.config['BABEL_DEFAULT_LOCALE'] = 'en'
app.config['BABEL_SUPPORTED_LOCALES'] = ['en', 'ru', 'kk']
app.config['BABEL_TRANSLATION_DIRECTORIES'] = 'translations'

UPLOAD_FOLDER = os.path.join(app.static_folder, 'uploads')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

babel = Babel(app, locale_selector=lambda: g.get('locale', 'en'))

MODEL_PATH = os.path.join('models', 'simple_model.keras')
DROPBOX_LINK = "https://www.dropbox.com/scl/fi/m9a3rj98z7zcnxxkeqv4j/simple_model.keras?rlkey=fw291bkxrh38sr5swbnouosom&dl=1"

def download_model():
    os.makedirs(os.path.dirname(MODEL_PATH), exist_ok=True)
    if not os.path.exists(MODEL_PATH):
        print("üî¥ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–∫–∞—á–∏–≤–∞—é —Å Dropbox...")
        try:
            response = requests.get(DROPBOX_LINK, stream=True, timeout=300) # –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç
            response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
            with open(MODEL_PATH, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!")
        except requests.exceptions.RequestException as e:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        except Exception as e:
             raise Exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    download_model()
    model = load_model(MODEL_PATH)
    print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
except Exception as e:
    print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. {e}")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sys.exit(1) –µ—Å–ª–∏ –±–µ–∑ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ
    model = None # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –≤ None, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–ø–∞–ª–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

label_mapping = {
    0: 'Chickenpox',
    1: 'Cowpox',
    2: 'Hand, foot and mouth disease',
    3: 'Healthy',
    4: 'Measles',
    5: 'Monkeypox'
}

logging.basicConfig(level=logging.INFO) # INFO —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ, —á–µ–º DEBUG

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π ---
# –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ Pillow –æ–±—ã—á–Ω–æ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
# –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, HEIC, AVIF) –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø. —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
app.config['ALLOWED_EXTENSIONS'] = {
    'png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'tif', 'webp',
    'ppm', 'pgm', 'pbm', 'pnm', # Netpbm format
    'ico', 'jfif', 'jpe',
    # 'heic', 'heif', # –¢—Ä–µ–±—É—é—Ç libheif
    # 'avif', # –¢—Ä–µ–±—É–µ—Ç libavif
}

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (–≤–∫–ª—é—á–∞—è —Ñ–∞–π–ª) ---
# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (Nginx, Gunicorn –∏ —Ç.–¥.) –∏ —Ö–æ—Å—Ç–∏–Ω–≥-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ (Render)
# –¢–ê–ö–ñ–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º —Ç–∞–∫–∏—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤! –ò–Ω–∞—á–µ Flask –¥–∞–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç –∑–∞–ø—Ä–æ—Å.
app.config['MAX_CONTENT_LENGTH'] = 250 * 1024 * 1024 # 250 MB

# --- –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ RAM! ---
# –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º 250MB —Å –ø–æ–º–æ—â—å—é Pillow
# –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ì–ò–ì–ê–ë–ê–ô–¢–´ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤.

@app.before_request
def set_locale():
    lang = request.args.get('lang', session.get('lang', 'en'))
    g.locale = lang if lang in app.config['BABEL_SUPPORTED_LOCALES'] else 'en'
    session['lang'] = g.locale # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —Ñ–∞–π–ª –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ."""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.context_processor
def inject_current_year():
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ñ—É—Ç–µ—Ä–∞
    return {'current_year': datetime.datetime.now().year}

@app.route('/')
def index():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω.
    # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
    # –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤ JS.
    prediction_key = session.get('prediction')
    image_url = session.get('image_url')
    confidence = session.get('confidence')
    disease_info_translated = {}
    translated_disease_name = None

    if prediction_key and g.locale: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–∞ –≤ g
        disease_info_data = disease_info.get(prediction_key, {})
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'en' –∫–∞–∫ fallback, –µ—Å–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        disease_info_localized = disease_info_data.get(g.locale, disease_info_data.get('en', {}))

        translated_disease_name = disease_info_localized.get("title", prediction_key) # Fallback –Ω–∞ –∫–ª—é—á, –µ—Å–ª–∏ title –Ω–µ—Ç

        disease_info_translated = {
            "Title": translated_disease_name, # –£–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            "Symptoms": disease_info_localized.get("symptoms", []),
            "Causes": disease_info_localized.get("causes", []),
            "Prevention": disease_info_localized.get("prevention", []),
            "Treatment": disease_info_localized.get("treatment", "")
        }
    elif prediction_key:
        # –ï—Å–ª–∏ g.locale –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ before_request),
        # –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logging.warning(f"g.locale –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è prediction_key: {prediction_key}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        disease_info_data = disease_info.get(prediction_key, {})
        disease_info_localized = disease_info_data.get('en', {})
        translated_disease_name = disease_info_localized.get("title", prediction_key)
        disease_info_translated = {
             "Title": translated_disease_name,
             "Symptoms": disease_info_localized.get("symptoms", []),
             "Causes": disease_info_localized.get("causes", []),
             "Prevention": disease_info_localized.get("prevention", []),
             "Treatment": disease_info_localized.get("treatment", "")
         }


    return render_template(
        'index.html',
        # lang=g.locale, # lang –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ g
        prediction=translated_disease_name, # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        confidence=confidence,          # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        image_url=image_url,            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        disease_info=disease_info_translated # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
    )

@app.route('/upload', methods=['POST'])
def upload_file():
    if model is None:
         logging.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
         # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
         return jsonify(error=_('Model is not available, cannot analyze.')), 503 # Service Unavailable

    if 'image' not in request.files:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        return jsonify(error=_('No file part')), 400

    file = request.files['image']
    if file.filename == '':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        return jsonify(error=_('No file selected')), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å, –ü–û–°–õ–ï —Ç–æ–≥–æ –∫–∞–∫ Flask (Werkzeug) —É–∂–µ –ø—Ä–∏–Ω—è–ª –µ–≥–æ
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –±–æ–ª—å—à–µ MAX_CONTENT_LENGTH, Flask –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É 413 –¥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if file and allowed_file(file.filename):
        file_path = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º file_path
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)
            logging.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            # –í–ê–ñ–ù–û: .open() –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ RAM –¥–ª—è 250MB —Ñ–∞–π–ª–æ–≤!
            logging.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {filename}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'rb' –¥–ª—è —á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã Pillow —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ñ–æ—Ä–º–∞—Ç
            with Image.open(file_path) as image:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –Ω—É–∂–Ω–∞, —Ç.–∫. –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç 3 –∫–∞–Ω–∞–ª–∞
                # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –î–û –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                image = image.convert('RGB').resize((128, 128))
                logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —Ä–∞–∑–º–µ—Ä–µ: {filename}")

                image_array = np.array(image, dtype=np.float32) / 255.0
                image_array = np.expand_dims(image_array, axis=0)

            logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è: {filename}")
            prediction = model.predict(image_array)
            logging.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è: {filename}")

            predicted_class = int(np.argmax(prediction[0]))
            confidence = float(round(prediction[0][predicted_class] * 100, 2))
            disease_key = label_mapping.get(predicted_class, 'Unknown') # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ–ª–µ–∑–Ω–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
            disease_info_data = disease_info.get(disease_key, {})
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º g.locale (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ before_request) –∏ 'en' –∫–∞–∫ fallback
            disease_info_localized = disease_info_data.get(g.locale, disease_info_data.get('en', {}))

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            translated_disease_name = disease_info_localized.get("title", disease_key)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –¥–ª—è —Å–ª—É—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            image_url_for_session = url_for('static', filename=f'uploads/{filename}', _external=False) # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –¥–ª—è —Å–µ—Å—Å–∏–∏
            session['image_url'] = image_url_for_session
            session['prediction'] = disease_key # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –±–æ–ª–µ–∑–Ω–∏
            session['confidence'] = confidence
            session['disease_info'] = disease_info_localized # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ—É

            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è JavaScript
            return jsonify(
                image_url=url_for('static', filename=f'uploads/{filename}'), # URL –¥–ª—è JS
                prediction_key=disease_key, # –û—Ç–¥–∞–µ–º –∫–ª—é—á –¥–ª—è JS
                prediction_title=translated_disease_name, # –û—Ç–¥–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                confidence=confidence,
                info=disease_info_localized # –û—Ç–¥–∞–µ–º –≤—Å—é –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            )

        except Image.UnidentifiedImageError:
             logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename}")
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
             return jsonify(error=_('Cannot identify image file. Please upload a valid image.')), 400
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏")
            # –ù–µ –æ—Ç–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            return jsonify(error=_('An error occurred during analysis.')), 500
        finally:
             # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞),
             # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –¥–∏—Å–∫. –û–±–µ—Ä–Ω—É—Ç–æ –≤ try/except –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º.
             if file_path and os.path.exists(file_path):
                 try:
                     os.remove(file_path)
                     logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
                 except Exception as e_remove:
                     logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e_remove}")

    elif file: # –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        return jsonify(error=_('Invalid file format. Allowed formats: {formats}').format(formats=', '.join(app.config['ALLOWED_EXTENSIONS']))), 400
    else: # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã—à–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        return jsonify(error=_('An unknown error occurred with the file upload.')), 400


@app.route('/clear', methods=['POST'])
def clear_session_route(): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    try:
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ uploads –ù–ï –¥–µ–ª–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, —Ç.–∫. —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ "–∑–∞–≤–∏—Å—à–∏–µ" —Ñ–∞–π–ª—ã, –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
        session.pop('image_url', None)
        session.pop('prediction', None)
        session.pop('confidence', None)
        session.pop('disease_info', None) # –û—á–∏—â–∞–µ–º –∏ –∏–Ω—Ñ–æ –æ –±–æ–ª–µ–∑–Ω–∏
        logging.info("–°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞.")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        return jsonify(message=_("Data cleared successfully.")) # –í–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º _() –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        return jsonify(error=_('An error occurred while clearing data.')), 500

if __name__ == '__main__':
    # download_model() # –ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤—ã—à–µ, –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if model is None:
        print("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ –º–æ–¥–µ–ª–∏.")
    else:
        port = int(os.environ.get('PORT', 8080))
        # debug=False –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!
        # host='0.0.0.0' –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–≤–Ω–µ (–≤–∞–∂–Ω–æ –¥–ª—è Render/Docker)
        app.run(host='0.0.0.0', port=port, debug=False)
